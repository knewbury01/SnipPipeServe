|    import groovy.grape.GrapeIvy
    
    def source1 = '''
    println('This is a nice safe Groovy script.')
    '''
    
    def source2 = '''
    @Grab('commons-validator:commons-validator:1.4.1')
    
    import org.apache.commons.validator.routines.EmailValidator
    
    def emailValidator = EmailValidator.getInstance();
    
    assert emailValidator.isValid('what.a.shame@us.elections.gov')
    assert !emailValidator.isValid('an_invalid_emai_address')
    
    println 'You should not see this message!'
    '''
    
    def script
    def shell = new GroovyShell()
    def proxy = ProxyMetaClass.getInstance(GrapeIvy)
    
    proxy.interceptor = new GrapeInterceptor({group, module, version ->
        if(group == 'commons-validator' && module == 'commons-validator') false
        else true
    })
    
    proxy.use {
        shell.parse(source1).run()
        
        try {
            shell.parse(source2).run()
        } catch (org.codehaus.groovy.control.MultipleCompilationErrorsException e) {
            assert e.message.contains('unable to resolve class')
        }
    }
    
    @groovy.transform.TupleConstructor
    class GrapeInterceptor implements Interceptor {
        private boolean invokeMethod = true
        Closure authorizer
         
        def afterInvoke(Object object, String methodName, Object[] arguments, Object result) {
            invokeMethod = true
    
            return result
        }
        
        def beforeInvoke(Object object, String methodName, Object[] arguments) {
            if(methodName == 'createGrabRecord') {
                def dependencies = arguments[0]
                invokeMethod = authorizer(dependencies.group, dependencies.module, dependencies.version)
            } else {
                invokeMethod = true
            }
            
            return null
        }
        
        boolean doInvoke() { invokeMethod }
    }
