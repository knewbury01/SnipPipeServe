|    #!/usr/bin/ruby -w
    START_A = "A"[0]
    START_a = "a"[0]
    START_0 = "0"[0]
    CODEMASK = ((1 << 28) - 1) # turn on lower 28 bits
    RANDOMMASK = ((1 << 60) - 1) & ~ CODEMASK # turn on upper 32 bits
    def compress(line)
        a, b, c, h, i, j, k = line.chomp().each_char().entries()
        a, b, c = a[0], b[0], c[0]
        small_a, small_b, small_c = a - START_A, b - START_A, c - START_A
        letters = (small_a * 26**2) + (small_b * 26) + small_c
        h, i, j, k = Integer(h), Integer(i), Integer(j), Integer(k)
        number = letters * 10_000 + h*1000 + i*100 + j*10 + k
    end
    def uncompress(number)
        k = number % 10
        number /= 10
        j = number % 10
        number /= 10
        i = number % 10
        number /= 10
        h = number % 10
        number /= 10
        small_c = number % 26
        number /= 26
        small_b = number % 26
        number /= 26
        small_a = number % 26
        number /= 26
        if (number != 0)
                raise "input wasn't generated with compress()"
        end
        a, b, c = small_a + START_A, small_b + START_A, small_c + START_A
        [a.chr(), b.chr(), c.chr(), h.to_s(), i.to_s(), j.to_s(), k.to_s()].join()
    end
    def add_random(number)
        (rand(2**31) << 28) + number
    end 
    def remove_random(number)
        [number & CODEMASK, number & RANDOMMASK]
    end
    def to_output(number)
        a = []
        begin
                a << transform_out(number % 62)
                number /= 62
        end while(number > 0)
        a.reverse().join()
    end
    def from_output(string)
        num = 0
        string.each_char() do |c|
                num *= 62
                num += transform_in(c)
        end     
        num
    end
    def transform_out(small)
        if (small < 0 || small > 61)
                raise "small should be between 0 and 61, inclusive"
        end
        if (small < 26)
                out = START_A+small
        elsif (small < 52)
                out = START_a+(small-26)
        else
                out = START_0+(small-52)
        end
        out.chr()
    end
    def transform_in(char)
        if (/^[A-Za-z0-9]$/ !~ char)
                raise "char should be A-Z, a-z, or 0-9, inclusive"
        end
        num = char[0]
        out = case num
        when START_A .. START_A+26 then num - START_A
        when START_a .. START_a+26 then (num - START_a) + 26
        when START_0 .. START_0+10 then (num - START_0) + 52
        end
        out
    end
    begin
        while(line = DATA.readline()) do
                line.chomp!()
                c = compress(line)
                a = add_random(c)
                output = to_output(a)
                input = from_output(output)
                new_c, r = remove_random(input)
                u = uncompress(new_c)
                printf("original input: %s\n compressed: %d\n after adding random amount: %d\n *output: %s\n *input: %s\n random amount added: %d\n after removing random amount: %d\nuncompressed: %s\n", line, c, a, output, input, r, new_c, u)
        end
    rescue EOFError => e
    end
    __END__
    AAA0000
    SIN1500
    ABD2123
    SMS3345
    ZZZ9999
